// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Token entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Token entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Token", id.toString(), this);
  }

  static load(id: string): Token | null {
    return store.get("Token", id) as Token | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    return value.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }

  get usdPrice(): BigDecimal | null {
    let value = this.get("usdPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set usdPrice(value: BigDecimal | null) {
    if (value === null) {
      this.unset("usdPrice");
    } else {
      this.set("usdPrice", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get ethPrice(): BigDecimal | null {
    let value = this.get("ethPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set ethPrice(value: BigDecimal | null) {
    if (value === null) {
      this.unset("ethPrice");
    } else {
      this.set("ethPrice", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get liquidity(): BigDecimal {
    let value = this.get("liquidity");
    return value.toBigDecimal();
  }

  set liquidity(value: BigDecimal) {
    this.set("liquidity", Value.fromBigDecimal(value));
  }

  get liquidityInUsd(): BigDecimal | null {
    let value = this.get("liquidityInUsd");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set liquidityInUsd(value: BigDecimal | null) {
    if (value === null) {
      this.unset("liquidityInUsd");
    } else {
      this.set("liquidityInUsd", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get liquidityInEth(): BigDecimal | null {
    let value = this.get("liquidityInEth");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set liquidityInEth(value: BigDecimal | null) {
    if (value === null) {
      this.unset("liquidityInEth");
    } else {
      this.set("liquidityInEth", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get pairBase(): Array<string> {
    let value = this.get("pairBase");
    return value.toStringArray();
  }

  set pairBase(value: Array<string>) {
    this.set("pairBase", Value.fromStringArray(value));
  }

  get pairQuote(): Array<string> {
    let value = this.get("pairQuote");
    return value.toStringArray();
  }

  set pairQuote(value: Array<string>) {
    this.set("pairQuote", Value.fromStringArray(value));
  }

  get freezePairBase(): Array<string> {
    let value = this.get("freezePairBase");
    return value.toStringArray();
  }

  set freezePairBase(value: Array<string>) {
    this.set("freezePairBase", Value.fromStringArray(value));
  }

  get freezePairQuote(): Array<string> {
    let value = this.get("freezePairQuote");
    return value.toStringArray();
  }

  set freezePairQuote(value: Array<string>) {
    this.set("freezePairQuote", Value.fromStringArray(value));
  }

  get pairPay(): Array<string> {
    let value = this.get("pairPay");
    return value.toStringArray();
  }

  set pairPay(value: Array<string>) {
    this.set("pairPay", Value.fromStringArray(value));
  }

  get pairReceive(): Array<string> {
    let value = this.get("pairReceive");
    return value.toStringArray();
  }

  set pairReceive(value: Array<string>) {
    this.set("pairReceive", Value.fromStringArray(value));
  }

  get volumeToken(): Array<string> {
    let value = this.get("volumeToken");
    return value.toStringArray();
  }

  set volumeToken(value: Array<string>) {
    this.set("volumeToken", Value.fromStringArray(value));
  }

  get usdPriceTokenOfHour(): Array<string> {
    let value = this.get("usdPriceTokenOfHour");
    return value.toStringArray();
  }

  set usdPriceTokenOfHour(value: Array<string>) {
    this.set("usdPriceTokenOfHour", Value.fromStringArray(value));
  }

  get usdPriceTokenOfEvery(): Array<string> {
    let value = this.get("usdPriceTokenOfEvery");
    return value.toStringArray();
  }

  set usdPriceTokenOfEvery(value: Array<string>) {
    this.set("usdPriceTokenOfEvery", Value.fromStringArray(value));
  }
}

export class WhiteListToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save WhiteListToken entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save WhiteListToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("WhiteListToken", id.toString(), this);
  }

  static load(id: string): WhiteListToken | null {
    return store.get("WhiteListToken", id) as WhiteListToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get usdPrice(): BigDecimal {
    let value = this.get("usdPrice");
    return value.toBigDecimal();
  }

  set usdPrice(value: BigDecimal) {
    this.set("usdPrice", Value.fromBigDecimal(value));
  }
}

export class TotalToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TotalToken entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TotalToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TotalToken", id.toString(), this);
  }

  static load(id: string): TotalToken | null {
    return store.get("TotalToken", id) as TotalToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokens(): Array<string> {
    let value = this.get("tokens");
    return value.toStringArray();
  }

  set tokens(value: Array<string>) {
    this.set("tokens", Value.fromStringArray(value));
  }
}

export class TotalLiquidityInSymbolByDay extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save TotalLiquidityInSymbolByDay entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TotalLiquidityInSymbolByDay entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TotalLiquidityInSymbolByDay", id.toString(), this);
  }

  static load(id: string): TotalLiquidityInSymbolByDay | null {
    return store.get(
      "TotalLiquidityInSymbolByDay",
      id
    ) as TotalLiquidityInSymbolByDay | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get totalValue(): BigDecimal {
    let value = this.get("totalValue");
    return value.toBigDecimal();
  }

  set totalValue(value: BigDecimal) {
    this.set("totalValue", Value.fromBigDecimal(value));
  }

  get timestampDay(): BigInt {
    let value = this.get("timestampDay");
    return value.toBigInt();
  }

  set timestampDay(value: BigInt) {
    this.set("timestampDay", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}

export class Pair extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Pair entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Pair entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Pair", id.toString(), this);
  }

  static load(id: string): Pair | null {
    return store.get("Pair", id) as Pair | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token0(): string {
    let value = this.get("token0");
    return value.toString();
  }

  set token0(value: string) {
    this.set("token0", Value.fromString(value));
  }

  get token1(): string {
    let value = this.get("token1");
    return value.toString();
  }

  set token1(value: string) {
    this.set("token1", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get token0Price(): BigDecimal {
    let value = this.get("token0Price");
    return value.toBigDecimal();
  }

  set token0Price(value: BigDecimal) {
    this.set("token0Price", Value.fromBigDecimal(value));
  }

  get token1Price(): BigDecimal {
    let value = this.get("token1Price");
    return value.toBigDecimal();
  }

  set token1Price(value: BigDecimal) {
    this.set("token1Price", Value.fromBigDecimal(value));
  }

  get reserve0(): BigDecimal {
    let value = this.get("reserve0");
    return value.toBigDecimal();
  }

  set reserve0(value: BigDecimal) {
    this.set("reserve0", Value.fromBigDecimal(value));
  }

  get reserve1(): BigDecimal {
    let value = this.get("reserve1");
    return value.toBigDecimal();
  }

  set reserve1(value: BigDecimal) {
    this.set("reserve1", Value.fromBigDecimal(value));
  }

  get supply(): BigDecimal {
    let value = this.get("supply");
    return value.toBigDecimal();
  }

  set supply(value: BigDecimal) {
    this.set("supply", Value.fromBigDecimal(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    return value.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }

  get totalToken0Volume(): BigDecimal {
    let value = this.get("totalToken0Volume");
    return value.toBigDecimal();
  }

  set totalToken0Volume(value: BigDecimal) {
    this.set("totalToken0Volume", Value.fromBigDecimal(value));
  }

  get totalToken1Volume(): BigDecimal {
    let value = this.get("totalToken1Volume");
    return value.toBigDecimal();
  }

  set totalToken1Volume(value: BigDecimal) {
    this.set("totalToken1Volume", Value.fromBigDecimal(value));
  }

  get totalVolumeUsd(): BigDecimal {
    let value = this.get("totalVolumeUsd");
    return value.toBigDecimal();
  }

  set totalVolumeUsd(value: BigDecimal) {
    this.set("totalVolumeUsd", Value.fromBigDecimal(value));
  }

  get swaps(): Array<string> {
    let value = this.get("swaps");
    return value.toStringArray();
  }

  set swaps(value: Array<string>) {
    this.set("swaps", Value.fromStringArray(value));
  }

  get pairPricesLasts(): Array<string> {
    let value = this.get("pairPricesLasts");
    return value.toStringArray();
  }

  set pairPricesLasts(value: Array<string>) {
    this.set("pairPricesLasts", Value.fromStringArray(value));
  }

  get pairPricesHours(): Array<string> {
    let value = this.get("pairPricesHours");
    return value.toStringArray();
  }

  set pairPricesHours(value: Array<string>) {
    this.set("pairPricesHours", Value.fromStringArray(value));
  }

  get pairPricesDays(): Array<string> {
    let value = this.get("pairPricesDays");
    return value.toStringArray();
  }

  set pairPricesDays(value: Array<string>) {
    this.set("pairPricesDays", Value.fromStringArray(value));
  }

  get pairPricesEverys(): Array<string> {
    let value = this.get("pairPricesEverys");
    return value.toStringArray();
  }

  set pairPricesEverys(value: Array<string>) {
    this.set("pairPricesEverys", Value.fromStringArray(value));
  }

  get swapPairFeeInfoByLasts(): Array<string> {
    let value = this.get("swapPairFeeInfoByLasts");
    return value.toStringArray();
  }

  set swapPairFeeInfoByLasts(value: Array<string>) {
    this.set("swapPairFeeInfoByLasts", Value.fromStringArray(value));
  }

  get swapPairFeeInfoByHours(): Array<string> {
    let value = this.get("swapPairFeeInfoByHours");
    return value.toStringArray();
  }

  set swapPairFeeInfoByHours(value: Array<string>) {
    this.set("swapPairFeeInfoByHours", Value.fromStringArray(value));
  }

  get pairVolumeHours(): Array<string> {
    let value = this.get("pairVolumeHours");
    return value.toStringArray();
  }

  set pairVolumeHours(value: Array<string>) {
    this.set("pairVolumeHours", Value.fromStringArray(value));
  }

  get pairVolumeDays(): Array<string> {
    let value = this.get("pairVolumeDays");
    return value.toStringArray();
  }

  set pairVolumeDays(value: Array<string>) {
    this.set("pairVolumeDays", Value.fromStringArray(value));
  }

  get pairApprovals(): Array<string> {
    let value = this.get("pairApprovals");
    return value.toStringArray();
  }

  set pairApprovals(value: Array<string>) {
    this.set("pairApprovals", Value.fromStringArray(value));
  }

  get userLpTokenAvailables(): Array<string> {
    let value = this.get("userLpTokenAvailables");
    return value.toStringArray();
  }

  set userLpTokenAvailables(value: Array<string>) {
    this.set("userLpTokenAvailables", Value.fromStringArray(value));
  }
}

export class FreezePair extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save FreezePair entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save FreezePair entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("FreezePair", id.toString(), this);
  }

  static load(id: string): FreezePair | null {
    return store.get("FreezePair", id) as FreezePair | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pairAddress(): Bytes {
    let value = this.get("pairAddress");
    return value.toBytes();
  }

  set pairAddress(value: Bytes) {
    this.set("pairAddress", Value.fromBytes(value));
  }

  get token0(): string {
    let value = this.get("token0");
    return value.toString();
  }

  set token0(value: string) {
    this.set("token0", Value.fromString(value));
  }

  get token1(): string {
    let value = this.get("token1");
    return value.toString();
  }

  set token1(value: string) {
    this.set("token1", Value.fromString(value));
  }

  get token0UsdPrice(): BigDecimal {
    let value = this.get("token0UsdPrice");
    return value.toBigDecimal();
  }

  set token0UsdPrice(value: BigDecimal) {
    this.set("token0UsdPrice", Value.fromBigDecimal(value));
  }

  get token1UsdPrice(): BigDecimal {
    let value = this.get("token1UsdPrice");
    return value.toBigDecimal();
  }

  set token1UsdPrice(value: BigDecimal) {
    this.set("token1UsdPrice", Value.fromBigDecimal(value));
  }

  get freezer(): Bytes {
    let value = this.get("freezer");
    return value.toBytes();
  }

  set freezer(value: Bytes) {
    this.set("freezer", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}

export class Swap extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Swap entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Swap entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Swap", id.toString(), this);
  }

  static load(id: string): Swap | null {
    return store.get("Swap", id) as Swap | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get pair(): string {
    let value = this.get("pair");
    return value.toString();
  }

  set pair(value: string) {
    this.set("pair", Value.fromString(value));
  }

  get pay(): string {
    let value = this.get("pay");
    return value.toString();
  }

  set pay(value: string) {
    this.set("pay", Value.fromString(value));
  }

  get receive(): string {
    let value = this.get("receive");
    return value.toString();
  }

  set receive(value: string) {
    this.set("receive", Value.fromString(value));
  }

  get payAmount(): BigDecimal {
    let value = this.get("payAmount");
    return value.toBigDecimal();
  }

  set payAmount(value: BigDecimal) {
    this.set("payAmount", Value.fromBigDecimal(value));
  }

  get receiveAmount(): BigDecimal {
    let value = this.get("receiveAmount");
    return value.toBigDecimal();
  }

  set receiveAmount(value: BigDecimal) {
    this.set("receiveAmount", Value.fromBigDecimal(value));
  }

  get amount0In(): BigDecimal {
    let value = this.get("amount0In");
    return value.toBigDecimal();
  }

  set amount0In(value: BigDecimal) {
    this.set("amount0In", Value.fromBigDecimal(value));
  }

  get amount1In(): BigDecimal {
    let value = this.get("amount1In");
    return value.toBigDecimal();
  }

  set amount1In(value: BigDecimal) {
    this.set("amount1In", Value.fromBigDecimal(value));
  }

  get amount0Out(): BigDecimal {
    let value = this.get("amount0Out");
    return value.toBigDecimal();
  }

  set amount0Out(value: BigDecimal) {
    this.set("amount0Out", Value.fromBigDecimal(value));
  }

  get amount1Out(): BigDecimal {
    let value = this.get("amount1Out");
    return value.toBigDecimal();
  }

  set amount1Out(value: BigDecimal) {
    this.set("amount1Out", Value.fromBigDecimal(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}

export class SwapPairFeeInfoByLast extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save SwapPairFeeInfoByLast entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SwapPairFeeInfoByLast entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SwapPairFeeInfoByLast", id.toString(), this);
  }

  static load(id: string): SwapPairFeeInfoByLast | null {
    return store.get(
      "SwapPairFeeInfoByLast",
      id
    ) as SwapPairFeeInfoByLast | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pair(): string {
    let value = this.get("pair");
    return value.toString();
  }

  set pair(value: string) {
    this.set("pair", Value.fromString(value));
  }

  get nowk(): BigDecimal {
    let value = this.get("nowk");
    return value.toBigDecimal();
  }

  set nowk(value: BigDecimal) {
    this.set("nowk", Value.fromBigDecimal(value));
  }

  get lastK(): BigDecimal {
    let value = this.get("lastK");
    return value.toBigDecimal();
  }

  set lastK(value: BigDecimal) {
    this.set("lastK", Value.fromBigDecimal(value));
  }

  get nowToken0Price(): BigDecimal {
    let value = this.get("nowToken0Price");
    return value.toBigDecimal();
  }

  set nowToken0Price(value: BigDecimal) {
    this.set("nowToken0Price", Value.fromBigDecimal(value));
  }

  get nowToken1Price(): BigDecimal {
    let value = this.get("nowToken1Price");
    return value.toBigDecimal();
  }

  set nowToken1Price(value: BigDecimal) {
    this.set("nowToken1Price", Value.fromBigDecimal(value));
  }

  get lastToken0Price(): BigDecimal {
    let value = this.get("lastToken0Price");
    return value.toBigDecimal();
  }

  set lastToken0Price(value: BigDecimal) {
    this.set("lastToken0Price", Value.fromBigDecimal(value));
  }

  get lastToken1Price(): BigDecimal {
    let value = this.get("lastToken1Price");
    return value.toBigDecimal();
  }

  set lastToken1Price(value: BigDecimal) {
    this.set("lastToken1Price", Value.fromBigDecimal(value));
  }

  get totalFeeValue(): BigDecimal {
    let value = this.get("totalFeeValue");
    return value.toBigDecimal();
  }

  set totalFeeValue(value: BigDecimal) {
    this.set("totalFeeValue", Value.fromBigDecimal(value));
  }

  get totalFeeTokenValue(): BigDecimal {
    let value = this.get("totalFeeTokenValue");
    return value.toBigDecimal();
  }

  set totalFeeTokenValue(value: BigDecimal) {
    this.set("totalFeeTokenValue", Value.fromBigDecimal(value));
  }

  get ethPrice(): BigDecimal {
    let value = this.get("ethPrice");
    return value.toBigDecimal();
  }

  set ethPrice(value: BigDecimal) {
    this.set("ethPrice", Value.fromBigDecimal(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}

export class SwapPairFeeInfoByHour extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save SwapPairFeeInfoByHour entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SwapPairFeeInfoByHour entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SwapPairFeeInfoByHour", id.toString(), this);
  }

  static load(id: string): SwapPairFeeInfoByHour | null {
    return store.get(
      "SwapPairFeeInfoByHour",
      id
    ) as SwapPairFeeInfoByHour | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pair(): string {
    let value = this.get("pair");
    return value.toString();
  }

  set pair(value: string) {
    this.set("pair", Value.fromString(value));
  }

  get k(): BigDecimal {
    let value = this.get("k");
    return value.toBigDecimal();
  }

  set k(value: BigDecimal) {
    this.set("k", Value.fromBigDecimal(value));
  }

  get totalFeeValue(): BigDecimal {
    let value = this.get("totalFeeValue");
    return value.toBigDecimal();
  }

  set totalFeeValue(value: BigDecimal) {
    this.set("totalFeeValue", Value.fromBigDecimal(value));
  }

  get timestampHour(): BigInt {
    let value = this.get("timestampHour");
    return value.toBigInt();
  }

  set timestampHour(value: BigInt) {
    this.set("timestampHour", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}

export class Approval extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Approval entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Approval entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Approval", id.toString(), this);
  }

  static load(id: string): Approval | null {
    return store.get("Approval", id) as Approval | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get source(): string {
    let value = this.get("source");
    return value.toString();
  }

  set source(value: string) {
    this.set("source", Value.fromString(value));
  }

  get sourceAddress(): Bytes {
    let value = this.get("sourceAddress");
    return value.toBytes();
  }

  set sourceAddress(value: Bytes) {
    this.set("sourceAddress", Value.fromBytes(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get spender(): Bytes {
    let value = this.get("spender");
    return value.toBytes();
  }

  set spender(value: Bytes) {
    this.set("spender", Value.fromBytes(value));
  }

  get value(): BigDecimal {
    let value = this.get("value");
    return value.toBigDecimal();
  }

  set value(value: BigDecimal) {
    this.set("value", Value.fromBigDecimal(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}

export class PairApproval extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PairApproval entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PairApproval entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PairApproval", id.toString(), this);
  }

  static load(id: string): PairApproval | null {
    return store.get("PairApproval", id) as PairApproval | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pair(): string {
    let value = this.get("pair");
    return value.toString();
  }

  set pair(value: string) {
    this.set("pair", Value.fromString(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get spender(): Bytes {
    let value = this.get("spender");
    return value.toBytes();
  }

  set spender(value: Bytes) {
    this.set("spender", Value.fromBytes(value));
  }

  get value(): BigDecimal {
    let value = this.get("value");
    return value.toBigDecimal();
  }

  set value(value: BigDecimal) {
    this.set("value", Value.fromBigDecimal(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}

export class PairPricesLast extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PairPricesLast entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PairPricesLast entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PairPricesLast", id.toString(), this);
  }

  static load(id: string): PairPricesLast | null {
    return store.get("PairPricesLast", id) as PairPricesLast | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pair(): string {
    let value = this.get("pair");
    return value.toString();
  }

  set pair(value: string) {
    this.set("pair", Value.fromString(value));
  }

  get reserve0(): BigDecimal {
    let value = this.get("reserve0");
    return value.toBigDecimal();
  }

  set reserve0(value: BigDecimal) {
    this.set("reserve0", Value.fromBigDecimal(value));
  }

  get reserve1(): BigDecimal {
    let value = this.get("reserve1");
    return value.toBigDecimal();
  }

  set reserve1(value: BigDecimal) {
    this.set("reserve1", Value.fromBigDecimal(value));
  }

  get token0Price(): BigDecimal {
    let value = this.get("token0Price");
    return value.toBigDecimal();
  }

  set token0Price(value: BigDecimal) {
    this.set("token0Price", Value.fromBigDecimal(value));
  }

  get token1Price(): BigDecimal {
    let value = this.get("token1Price");
    return value.toBigDecimal();
  }

  set token1Price(value: BigDecimal) {
    this.set("token1Price", Value.fromBigDecimal(value));
  }

  get token0Pricelow(): BigDecimal {
    let value = this.get("token0Pricelow");
    return value.toBigDecimal();
  }

  set token0Pricelow(value: BigDecimal) {
    this.set("token0Pricelow", Value.fromBigDecimal(value));
  }

  get token1Pricelow(): BigDecimal {
    let value = this.get("token1Pricelow");
    return value.toBigDecimal();
  }

  set token1Pricelow(value: BigDecimal) {
    this.set("token1Pricelow", Value.fromBigDecimal(value));
  }

  get token0PriceLowTimestamp(): BigInt {
    let value = this.get("token0PriceLowTimestamp");
    return value.toBigInt();
  }

  set token0PriceLowTimestamp(value: BigInt) {
    this.set("token0PriceLowTimestamp", Value.fromBigInt(value));
  }

  get token1PriceLowTimestamp(): BigInt {
    let value = this.get("token1PriceLowTimestamp");
    return value.toBigInt();
  }

  set token1PriceLowTimestamp(value: BigInt) {
    this.set("token1PriceLowTimestamp", Value.fromBigInt(value));
  }

  get token0Pricehigh(): BigDecimal {
    let value = this.get("token0Pricehigh");
    return value.toBigDecimal();
  }

  set token0Pricehigh(value: BigDecimal) {
    this.set("token0Pricehigh", Value.fromBigDecimal(value));
  }

  get token1Pricehigh(): BigDecimal {
    let value = this.get("token1Pricehigh");
    return value.toBigDecimal();
  }

  set token1Pricehigh(value: BigDecimal) {
    this.set("token1Pricehigh", Value.fromBigDecimal(value));
  }

  get token0PriceHighTimestamp(): BigInt {
    let value = this.get("token0PriceHighTimestamp");
    return value.toBigInt();
  }

  set token0PriceHighTimestamp(value: BigInt) {
    this.set("token0PriceHighTimestamp", Value.fromBigInt(value));
  }

  get token1PriceHighTimestamp(): BigInt {
    let value = this.get("token1PriceHighTimestamp");
    return value.toBigInt();
  }

  set token1PriceHighTimestamp(value: BigInt) {
    this.set("token1PriceHighTimestamp", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}

export class PairPricesMinuter extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PairPricesMinuter entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PairPricesMinuter entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PairPricesMinuter", id.toString(), this);
  }

  static load(id: string): PairPricesMinuter | null {
    return store.get("PairPricesMinuter", id) as PairPricesMinuter | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pair(): string {
    let value = this.get("pair");
    return value.toString();
  }

  set pair(value: string) {
    this.set("pair", Value.fromString(value));
  }

  get timestampMinuter(): BigInt {
    let value = this.get("timestampMinuter");
    return value.toBigInt();
  }

  set timestampMinuter(value: BigInt) {
    this.set("timestampMinuter", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get reserve0(): BigDecimal {
    let value = this.get("reserve0");
    return value.toBigDecimal();
  }

  set reserve0(value: BigDecimal) {
    this.set("reserve0", Value.fromBigDecimal(value));
  }

  get reserve1(): BigDecimal {
    let value = this.get("reserve1");
    return value.toBigDecimal();
  }

  set reserve1(value: BigDecimal) {
    this.set("reserve1", Value.fromBigDecimal(value));
  }

  get token0Price(): BigDecimal {
    let value = this.get("token0Price");
    return value.toBigDecimal();
  }

  set token0Price(value: BigDecimal) {
    this.set("token0Price", Value.fromBigDecimal(value));
  }

  get token1Price(): BigDecimal {
    let value = this.get("token1Price");
    return value.toBigDecimal();
  }

  set token1Price(value: BigDecimal) {
    this.set("token1Price", Value.fromBigDecimal(value));
  }

  get token0high(): BigDecimal {
    let value = this.get("token0high");
    return value.toBigDecimal();
  }

  set token0high(value: BigDecimal) {
    this.set("token0high", Value.fromBigDecimal(value));
  }

  get token1high(): BigDecimal {
    let value = this.get("token1high");
    return value.toBigDecimal();
  }

  set token1high(value: BigDecimal) {
    this.set("token1high", Value.fromBigDecimal(value));
  }

  get token0low(): BigDecimal {
    let value = this.get("token0low");
    return value.toBigDecimal();
  }

  set token0low(value: BigDecimal) {
    this.set("token0low", Value.fromBigDecimal(value));
  }

  get token1low(): BigDecimal {
    let value = this.get("token1low");
    return value.toBigDecimal();
  }

  set token1low(value: BigDecimal) {
    this.set("token1low", Value.fromBigDecimal(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}

export class PairPricesHour extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PairPricesHour entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PairPricesHour entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PairPricesHour", id.toString(), this);
  }

  static load(id: string): PairPricesHour | null {
    return store.get("PairPricesHour", id) as PairPricesHour | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pair(): string {
    let value = this.get("pair");
    return value.toString();
  }

  set pair(value: string) {
    this.set("pair", Value.fromString(value));
  }

  get timestampHour(): BigInt {
    let value = this.get("timestampHour");
    return value.toBigInt();
  }

  set timestampHour(value: BigInt) {
    this.set("timestampHour", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get reserve0(): BigDecimal {
    let value = this.get("reserve0");
    return value.toBigDecimal();
  }

  set reserve0(value: BigDecimal) {
    this.set("reserve0", Value.fromBigDecimal(value));
  }

  get reserve1(): BigDecimal {
    let value = this.get("reserve1");
    return value.toBigDecimal();
  }

  set reserve1(value: BigDecimal) {
    this.set("reserve1", Value.fromBigDecimal(value));
  }

  get token0Price(): BigDecimal {
    let value = this.get("token0Price");
    return value.toBigDecimal();
  }

  set token0Price(value: BigDecimal) {
    this.set("token0Price", Value.fromBigDecimal(value));
  }

  get token1Price(): BigDecimal {
    let value = this.get("token1Price");
    return value.toBigDecimal();
  }

  set token1Price(value: BigDecimal) {
    this.set("token1Price", Value.fromBigDecimal(value));
  }

  get token0high(): BigDecimal {
    let value = this.get("token0high");
    return value.toBigDecimal();
  }

  set token0high(value: BigDecimal) {
    this.set("token0high", Value.fromBigDecimal(value));
  }

  get token1high(): BigDecimal {
    let value = this.get("token1high");
    return value.toBigDecimal();
  }

  set token1high(value: BigDecimal) {
    this.set("token1high", Value.fromBigDecimal(value));
  }

  get token0low(): BigDecimal {
    let value = this.get("token0low");
    return value.toBigDecimal();
  }

  set token0low(value: BigDecimal) {
    this.set("token0low", Value.fromBigDecimal(value));
  }

  get token1low(): BigDecimal {
    let value = this.get("token1low");
    return value.toBigDecimal();
  }

  set token1low(value: BigDecimal) {
    this.set("token1low", Value.fromBigDecimal(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}

export class PairPricesDay extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PairPricesDay entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PairPricesDay entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PairPricesDay", id.toString(), this);
  }

  static load(id: string): PairPricesDay | null {
    return store.get("PairPricesDay", id) as PairPricesDay | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pair(): string {
    let value = this.get("pair");
    return value.toString();
  }

  set pair(value: string) {
    this.set("pair", Value.fromString(value));
  }

  get timestampDay(): BigInt {
    let value = this.get("timestampDay");
    return value.toBigInt();
  }

  set timestampDay(value: BigInt) {
    this.set("timestampDay", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get reserve0(): BigDecimal {
    let value = this.get("reserve0");
    return value.toBigDecimal();
  }

  set reserve0(value: BigDecimal) {
    this.set("reserve0", Value.fromBigDecimal(value));
  }

  get reserve1(): BigDecimal {
    let value = this.get("reserve1");
    return value.toBigDecimal();
  }

  set reserve1(value: BigDecimal) {
    this.set("reserve1", Value.fromBigDecimal(value));
  }

  get token0Price(): BigDecimal {
    let value = this.get("token0Price");
    return value.toBigDecimal();
  }

  set token0Price(value: BigDecimal) {
    this.set("token0Price", Value.fromBigDecimal(value));
  }

  get token1Price(): BigDecimal {
    let value = this.get("token1Price");
    return value.toBigDecimal();
  }

  set token1Price(value: BigDecimal) {
    this.set("token1Price", Value.fromBigDecimal(value));
  }

  get token0high(): BigDecimal {
    let value = this.get("token0high");
    return value.toBigDecimal();
  }

  set token0high(value: BigDecimal) {
    this.set("token0high", Value.fromBigDecimal(value));
  }

  get token1high(): BigDecimal {
    let value = this.get("token1high");
    return value.toBigDecimal();
  }

  set token1high(value: BigDecimal) {
    this.set("token1high", Value.fromBigDecimal(value));
  }

  get token0low(): BigDecimal {
    let value = this.get("token0low");
    return value.toBigDecimal();
  }

  set token0low(value: BigDecimal) {
    this.set("token0low", Value.fromBigDecimal(value));
  }

  get token1low(): BigDecimal {
    let value = this.get("token1low");
    return value.toBigDecimal();
  }

  set token1low(value: BigDecimal) {
    this.set("token1low", Value.fromBigDecimal(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}

export class PairPricesEvery extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PairPricesEvery entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PairPricesEvery entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PairPricesEvery", id.toString(), this);
  }

  static load(id: string): PairPricesEvery | null {
    return store.get("PairPricesEvery", id) as PairPricesEvery | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pair(): string {
    let value = this.get("pair");
    return value.toString();
  }

  set pair(value: string) {
    this.set("pair", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get reserve0(): BigDecimal {
    let value = this.get("reserve0");
    return value.toBigDecimal();
  }

  set reserve0(value: BigDecimal) {
    this.set("reserve0", Value.fromBigDecimal(value));
  }

  get reserve1(): BigDecimal {
    let value = this.get("reserve1");
    return value.toBigDecimal();
  }

  set reserve1(value: BigDecimal) {
    this.set("reserve1", Value.fromBigDecimal(value));
  }

  get token0Price(): BigDecimal {
    let value = this.get("token0Price");
    return value.toBigDecimal();
  }

  set token0Price(value: BigDecimal) {
    this.set("token0Price", Value.fromBigDecimal(value));
  }

  get token1Price(): BigDecimal {
    let value = this.get("token1Price");
    return value.toBigDecimal();
  }

  set token1Price(value: BigDecimal) {
    this.set("token1Price", Value.fromBigDecimal(value));
  }

  get token0UsdPrice(): BigDecimal | null {
    let value = this.get("token0UsdPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set token0UsdPrice(value: BigDecimal | null) {
    if (value === null) {
      this.unset("token0UsdPrice");
    } else {
      this.set("token0UsdPrice", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get token1UsdPrice(): BigDecimal | null {
    let value = this.get("token1UsdPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set token1UsdPrice(value: BigDecimal | null) {
    if (value === null) {
      this.unset("token1UsdPrice");
    } else {
      this.set("token1UsdPrice", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}

export class PairVolumeMinuter extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PairVolumeMinuter entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PairVolumeMinuter entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PairVolumeMinuter", id.toString(), this);
  }

  static load(id: string): PairVolumeMinuter | null {
    return store.get("PairVolumeMinuter", id) as PairVolumeMinuter | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestampMinuter(): BigInt {
    let value = this.get("timestampMinuter");
    return value.toBigInt();
  }

  set timestampMinuter(value: BigInt) {
    this.set("timestampMinuter", Value.fromBigInt(value));
  }

  get pair(): string {
    let value = this.get("pair");
    return value.toString();
  }

  set pair(value: string) {
    this.set("pair", Value.fromString(value));
  }

  get token0Volume(): BigDecimal {
    let value = this.get("token0Volume");
    return value.toBigDecimal();
  }

  set token0Volume(value: BigDecimal) {
    this.set("token0Volume", Value.fromBigDecimal(value));
  }

  get token1Volume(): BigDecimal {
    let value = this.get("token1Volume");
    return value.toBigDecimal();
  }

  set token1Volume(value: BigDecimal) {
    this.set("token1Volume", Value.fromBigDecimal(value));
  }

  get volumeUsd(): BigDecimal {
    let value = this.get("volumeUsd");
    return value.toBigDecimal();
  }

  set volumeUsd(value: BigDecimal) {
    this.set("volumeUsd", Value.fromBigDecimal(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}

export class PairVolumeHour extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PairVolumeHour entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PairVolumeHour entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PairVolumeHour", id.toString(), this);
  }

  static load(id: string): PairVolumeHour | null {
    return store.get("PairVolumeHour", id) as PairVolumeHour | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestampHour(): BigInt {
    let value = this.get("timestampHour");
    return value.toBigInt();
  }

  set timestampHour(value: BigInt) {
    this.set("timestampHour", Value.fromBigInt(value));
  }

  get pair(): string {
    let value = this.get("pair");
    return value.toString();
  }

  set pair(value: string) {
    this.set("pair", Value.fromString(value));
  }

  get token0Volume(): BigDecimal {
    let value = this.get("token0Volume");
    return value.toBigDecimal();
  }

  set token0Volume(value: BigDecimal) {
    this.set("token0Volume", Value.fromBigDecimal(value));
  }

  get token1Volume(): BigDecimal {
    let value = this.get("token1Volume");
    return value.toBigDecimal();
  }

  set token1Volume(value: BigDecimal) {
    this.set("token1Volume", Value.fromBigDecimal(value));
  }

  get volumeUsd(): BigDecimal {
    let value = this.get("volumeUsd");
    return value.toBigDecimal();
  }

  set volumeUsd(value: BigDecimal) {
    this.set("volumeUsd", Value.fromBigDecimal(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}

export class PairVolumeDay extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PairVolumeDay entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PairVolumeDay entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PairVolumeDay", id.toString(), this);
  }

  static load(id: string): PairVolumeDay | null {
    return store.get("PairVolumeDay", id) as PairVolumeDay | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestampDay(): BigInt {
    let value = this.get("timestampDay");
    return value.toBigInt();
  }

  set timestampDay(value: BigInt) {
    this.set("timestampDay", Value.fromBigInt(value));
  }

  get pair(): string {
    let value = this.get("pair");
    return value.toString();
  }

  set pair(value: string) {
    this.set("pair", Value.fromString(value));
  }

  get token0Volume(): BigDecimal {
    let value = this.get("token0Volume");
    return value.toBigDecimal();
  }

  set token0Volume(value: BigDecimal) {
    this.set("token0Volume", Value.fromBigDecimal(value));
  }

  get token1Volume(): BigDecimal {
    let value = this.get("token1Volume");
    return value.toBigDecimal();
  }

  set token1Volume(value: BigDecimal) {
    this.set("token1Volume", Value.fromBigDecimal(value));
  }

  get volumeUsd(): BigDecimal {
    let value = this.get("volumeUsd");
    return value.toBigDecimal();
  }

  set volumeUsd(value: BigDecimal) {
    this.set("volumeUsd", Value.fromBigDecimal(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}

export class TokenUsdPriceEvery extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TokenUsdPriceEvery entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TokenUsdPriceEvery entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TokenUsdPriceEvery", id.toString(), this);
  }

  static load(id: string): TokenUsdPriceEvery | null {
    return store.get("TokenUsdPriceEvery", id) as TokenUsdPriceEvery | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get price(): BigDecimal {
    let value = this.get("price");
    return value.toBigDecimal();
  }

  set price(value: BigDecimal) {
    this.set("price", Value.fromBigDecimal(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}

export class TokenUsdPriceHour extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TokenUsdPriceHour entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TokenUsdPriceHour entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TokenUsdPriceHour", id.toString(), this);
  }

  static load(id: string): TokenUsdPriceHour | null {
    return store.get("TokenUsdPriceHour", id) as TokenUsdPriceHour | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get price(): BigDecimal {
    let value = this.get("price");
    return value.toBigDecimal();
  }

  set price(value: BigDecimal) {
    this.set("price", Value.fromBigDecimal(value));
  }

  get timestampHour(): BigInt {
    let value = this.get("timestampHour");
    return value.toBigInt();
  }

  set timestampHour(value: BigInt) {
    this.set("timestampHour", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}

export class TokenVolumeHour extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TokenVolumeHour entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TokenVolumeHour entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TokenVolumeHour", id.toString(), this);
  }

  static load(id: string): TokenVolumeHour | null {
    return store.get("TokenVolumeHour", id) as TokenVolumeHour | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get volume(): BigDecimal {
    let value = this.get("volume");
    return value.toBigDecimal();
  }

  set volume(value: BigDecimal) {
    this.set("volume", Value.fromBigDecimal(value));
  }

  get volumeUsd(): BigDecimal {
    let value = this.get("volumeUsd");
    return value.toBigDecimal();
  }

  set volumeUsd(value: BigDecimal) {
    this.set("volumeUsd", Value.fromBigDecimal(value));
  }

  get timestampHour(): BigInt {
    let value = this.get("timestampHour");
    return value.toBigInt();
  }

  set timestampHour(value: BigInt) {
    this.set("timestampHour", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}

export class TotalVolumeInSymbolByDay extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save TotalVolumeInSymbolByDay entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TotalVolumeInSymbolByDay entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TotalVolumeInSymbolByDay", id.toString(), this);
  }

  static load(id: string): TotalVolumeInSymbolByDay | null {
    return store.get(
      "TotalVolumeInSymbolByDay",
      id
    ) as TotalVolumeInSymbolByDay | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get totalValue(): BigDecimal {
    let value = this.get("totalValue");
    return value.toBigDecimal();
  }

  set totalValue(value: BigDecimal) {
    this.set("totalValue", Value.fromBigDecimal(value));
  }

  get timestampDay(): BigInt {
    let value = this.get("timestampDay");
    return value.toBigInt();
  }

  set timestampDay(value: BigInt) {
    this.set("timestampDay", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}

export class TotalVolumeInSymbolByHour extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save TotalVolumeInSymbolByHour entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TotalVolumeInSymbolByHour entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TotalVolumeInSymbolByHour", id.toString(), this);
  }

  static load(id: string): TotalVolumeInSymbolByHour | null {
    return store.get(
      "TotalVolumeInSymbolByHour",
      id
    ) as TotalVolumeInSymbolByHour | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get totalValue(): BigDecimal {
    let value = this.get("totalValue");
    return value.toBigDecimal();
  }

  set totalValue(value: BigDecimal) {
    this.set("totalValue", Value.fromBigDecimal(value));
  }

  get timestampHour(): BigInt {
    let value = this.get("timestampHour");
    return value.toBigInt();
  }

  set timestampHour(value: BigInt) {
    this.set("timestampHour", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}

export class Mint extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Mint entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Mint entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Mint", id.toString(), this);
  }

  static load(id: string): Mint | null {
    return store.get("Mint", id) as Mint | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get pair(): string {
    let value = this.get("pair");
    return value.toString();
  }

  set pair(value: string) {
    this.set("pair", Value.fromString(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get liquidity(): BigDecimal {
    let value = this.get("liquidity");
    return value.toBigDecimal();
  }

  set liquidity(value: BigDecimal) {
    this.set("liquidity", Value.fromBigDecimal(value));
  }

  get sender(): Bytes | null {
    let value = this.get("sender");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes | null) {
    if (value === null) {
      this.unset("sender");
    } else {
      this.set("sender", Value.fromBytes(value as Bytes));
    }
  }

  get amount0(): BigDecimal | null {
    let value = this.get("amount0");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set amount0(value: BigDecimal | null) {
    if (value === null) {
      this.unset("amount0");
    } else {
      this.set("amount0", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get amount1(): BigDecimal | null {
    let value = this.get("amount1");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set amount1(value: BigDecimal | null) {
    if (value === null) {
      this.unset("amount1");
    } else {
      this.set("amount1", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get token0Price(): BigDecimal | null {
    let value = this.get("token0Price");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set token0Price(value: BigDecimal | null) {
    if (value === null) {
      this.unset("token0Price");
    } else {
      this.set("token0Price", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get token1Price(): BigDecimal | null {
    let value = this.get("token1Price");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set token1Price(value: BigDecimal | null) {
    if (value === null) {
      this.unset("token1Price");
    } else {
      this.set("token1Price", Value.fromBigDecimal(value as BigDecimal));
    }
  }
}

export class Burn extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Burn entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Burn entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Burn", id.toString(), this);
  }

  static load(id: string): Burn | null {
    return store.get("Burn", id) as Burn | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get pair(): string {
    let value = this.get("pair");
    return value.toString();
  }

  set pair(value: string) {
    this.set("pair", Value.fromString(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get liquidity(): BigDecimal {
    let value = this.get("liquidity");
    return value.toBigDecimal();
  }

  set liquidity(value: BigDecimal) {
    this.set("liquidity", Value.fromBigDecimal(value));
  }

  get sender(): Bytes | null {
    let value = this.get("sender");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes | null) {
    if (value === null) {
      this.unset("sender");
    } else {
      this.set("sender", Value.fromBytes(value as Bytes));
    }
  }

  get amount0(): BigDecimal | null {
    let value = this.get("amount0");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set amount0(value: BigDecimal | null) {
    if (value === null) {
      this.unset("amount0");
    } else {
      this.set("amount0", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get amount1(): BigDecimal | null {
    let value = this.get("amount1");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set amount1(value: BigDecimal | null) {
    if (value === null) {
      this.unset("amount1");
    } else {
      this.set("amount1", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get token0Price(): BigDecimal | null {
    let value = this.get("token0Price");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set token0Price(value: BigDecimal | null) {
    if (value === null) {
      this.unset("token0Price");
    } else {
      this.set("token0Price", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get token1Price(): BigDecimal | null {
    let value = this.get("token1Price");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set token1Price(value: BigDecimal | null) {
    if (value === null) {
      this.unset("token1Price");
    } else {
      this.set("token1Price", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get beComplete(): boolean {
    let value = this.get("beComplete");
    return value.toBoolean();
  }

  set beComplete(value: boolean) {
    this.set("beComplete", Value.fromBoolean(value));
  }

  get feeTo(): Bytes | null {
    let value = this.get("feeTo");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set feeTo(value: Bytes | null) {
    if (value === null) {
      this.unset("feeTo");
    } else {
      this.set("feeTo", Value.fromBytes(value as Bytes));
    }
  }

  get feeLiquidity(): BigDecimal | null {
    let value = this.get("feeLiquidity");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set feeLiquidity(value: BigDecimal | null) {
    if (value === null) {
      this.unset("feeLiquidity");
    } else {
      this.set("feeLiquidity", Value.fromBigDecimal(value as BigDecimal));
    }
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Transaction entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Transaction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Transaction", id.toString(), this);
  }

  static load(id: string): Transaction | null {
    return store.get("Transaction", id) as Transaction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get mints(): Array<string | null> {
    let value = this.get("mints");
    return value.toStringArray();
  }

  set mints(value: Array<string | null>) {
    this.set("mints", Value.fromStringArray(value));
  }

  get burns(): Array<string | null> {
    let value = this.get("burns");
    return value.toStringArray();
  }

  set burns(value: Array<string | null>) {
    this.set("burns", Value.fromStringArray(value));
  }

  get swaps(): Array<string | null> {
    let value = this.get("swaps");
    return value.toStringArray();
  }

  set swaps(value: Array<string | null>) {
    this.set("swaps", Value.fromStringArray(value));
  }
}

export class UserLpTokenAvailable extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UserLpTokenAvailable entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UserLpTokenAvailable entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UserLpTokenAvailable", id.toString(), this);
  }

  static load(id: string): UserLpTokenAvailable | null {
    return store.get("UserLpTokenAvailable", id) as UserLpTokenAvailable | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get pair(): string {
    let value = this.get("pair");
    return value.toString();
  }

  set pair(value: string) {
    this.set("pair", Value.fromString(value));
  }

  get amount_BI(): BigInt {
    let value = this.get("amount_BI");
    return value.toBigInt();
  }

  set amount_BI(value: BigInt) {
    this.set("amount_BI", Value.fromBigInt(value));
  }

  get amount_BD(): BigDecimal {
    let value = this.get("amount_BD");
    return value.toBigDecimal();
  }

  set amount_BD(value: BigDecimal) {
    this.set("amount_BD", Value.fromBigDecimal(value));
  }
}

export class Pool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Pool entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Pool entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Pool", id.toString(), this);
  }

  static load(id: string): Pool | null {
    return store.get("Pool", id) as Pool | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get stakingPair(): string | null {
    let value = this.get("stakingPair");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set stakingPair(value: string | null) {
    if (value === null) {
      this.unset("stakingPair");
    } else {
      this.set("stakingPair", Value.fromString(value as string));
    }
  }

  get token0(): Bytes | null {
    let value = this.get("token0");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set token0(value: Bytes | null) {
    if (value === null) {
      this.unset("token0");
    } else {
      this.set("token0", Value.fromBytes(value as Bytes));
    }
  }

  get token1(): Bytes | null {
    let value = this.get("token1");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set token1(value: Bytes | null) {
    if (value === null) {
      this.unset("token1");
    } else {
      this.set("token1", Value.fromBytes(value as Bytes));
    }
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    return value.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }

  get startBlock(): BigInt {
    let value = this.get("startBlock");
    return value.toBigInt();
  }

  set startBlock(value: BigInt) {
    this.set("startBlock", Value.fromBigInt(value));
  }

  get endBlock(): BigInt {
    let value = this.get("endBlock");
    return value.toBigInt();
  }

  set endBlock(value: BigInt) {
    this.set("endBlock", Value.fromBigInt(value));
  }

  get migrationBlock(): BigInt {
    let value = this.get("migrationBlock");
    return value.toBigInt();
  }

  set migrationBlock(value: BigInt) {
    this.set("migrationBlock", Value.fromBigInt(value));
  }

  get rewardPerBlock(): BigInt {
    let value = this.get("rewardPerBlock");
    return value.toBigInt();
  }

  set rewardPerBlock(value: BigInt) {
    this.set("rewardPerBlock", Value.fromBigInt(value));
  }

  get totalStakeAmount(): BigInt {
    let value = this.get("totalStakeAmount");
    return value.toBigInt();
  }

  set totalStakeAmount(value: BigInt) {
    this.set("totalStakeAmount", Value.fromBigInt(value));
  }

  get totalStakeAmount_BD(): BigDecimal {
    let value = this.get("totalStakeAmount_BD");
    return value.toBigDecimal();
  }

  set totalStakeAmount_BD(value: BigDecimal) {
    this.set("totalStakeAmount_BD", Value.fromBigDecimal(value));
  }

  get accuRewardPerShare(): BigInt {
    let value = this.get("accuRewardPerShare");
    return value.toBigInt();
  }

  set accuRewardPerShare(value: BigInt) {
    this.set("accuRewardPerShare", Value.fromBigInt(value));
  }

  get accuRewardLastUpdateBlock(): BigInt {
    let value = this.get("accuRewardLastUpdateBlock");
    return value.toBigInt();
  }

  set accuRewardLastUpdateBlock(value: BigInt) {
    this.set("accuRewardLastUpdateBlock", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}

export class Stake extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Stake entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Stake entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Stake", id.toString(), this);
  }

  static load(id: string): Stake | null {
    return store.get("Stake", id) as Stake | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get stakingPair(): string | null {
    let value = this.get("stakingPair");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set stakingPair(value: string | null) {
    if (value === null) {
      this.unset("stakingPair");
    } else {
      this.set("stakingPair", Value.fromString(value as string));
    }
  }

  get staker(): Bytes {
    let value = this.get("staker");
    return value.toBytes();
  }

  set staker(value: Bytes) {
    this.set("staker", Value.fromBytes(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}

export class UnStaked extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UnStaked entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UnStaked entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UnStaked", id.toString(), this);
  }

  static load(id: string): UnStaked | null {
    return store.get("UnStaked", id) as UnStaked | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get stakingPair(): string | null {
    let value = this.get("stakingPair");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set stakingPair(value: string | null) {
    if (value === null) {
      this.unset("stakingPair");
    } else {
      this.set("stakingPair", Value.fromString(value as string));
    }
  }

  get staker(): Bytes {
    let value = this.get("staker");
    return value.toBytes();
  }

  set staker(value: Bytes) {
    this.set("staker", Value.fromBytes(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}

export class RewardRedeemed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save RewardRedeemed entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save RewardRedeemed entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("RewardRedeemed", id.toString(), this);
  }

  static load(id: string): RewardRedeemed | null {
    return store.get("RewardRedeemed", id) as RewardRedeemed | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get token(): Bytes | null {
    let value = this.get("token");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set token(value: Bytes | null) {
    if (value === null) {
      this.unset("token");
    } else {
      this.set("token", Value.fromBytes(value as Bytes));
    }
  }

  get stakingPair(): string | null {
    let value = this.get("stakingPair");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set stakingPair(value: string | null) {
    if (value === null) {
      this.unset("stakingPair");
    } else {
      this.set("stakingPair", Value.fromString(value as string));
    }
  }

  get staker(): Bytes | null {
    let value = this.get("staker");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set staker(value: Bytes | null) {
    if (value === null) {
      this.unset("staker");
    } else {
      this.set("staker", Value.fromBytes(value as Bytes));
    }
  }

  get rewarder(): Bytes | null {
    let value = this.get("rewarder");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set rewarder(value: Bytes | null) {
    if (value === null) {
      this.unset("rewarder");
    } else {
      this.set("rewarder", Value.fromBytes(value as Bytes));
    }
  }

  get remainingRewards(): BigDecimal {
    let value = this.get("remainingRewards");
    return value.toBigDecimal();
  }

  set remainingRewards(value: BigDecimal) {
    this.set("remainingRewards", Value.fromBigDecimal(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}

export class UserReward extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UserReward entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UserReward entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UserReward", id.toString(), this);
  }

  static load(id: string): UserReward | null {
    return store.get("UserReward", id) as UserReward | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolId(): BigInt {
    let value = this.get("poolId");
    return value.toBigInt();
  }

  set poolId(value: BigInt) {
    this.set("poolId", Value.fromBigInt(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get remainingRewards(): BigDecimal {
    let value = this.get("remainingRewards");
    return value.toBigDecimal();
  }

  set remainingRewards(value: BigDecimal) {
    this.set("remainingRewards", Value.fromBigDecimal(value));
  }

  get redeemableRewards(): BigDecimal {
    let value = this.get("redeemableRewards");
    return value.toBigDecimal();
  }

  set redeemableRewards(value: BigDecimal) {
    this.set("redeemableRewards", Value.fromBigDecimal(value));
  }
}

export class StakingPair extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save StakingPair entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save StakingPair entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("StakingPair", id.toString(), this);
  }

  static load(id: string): StakingPair | null {
    return store.get("StakingPair", id) as StakingPair | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token0Address(): Bytes {
    let value = this.get("token0Address");
    return value.toBytes();
  }

  set token0Address(value: Bytes) {
    this.set("token0Address", Value.fromBytes(value));
  }

  get token1Address(): Bytes {
    let value = this.get("token1Address");
    return value.toBytes();
  }

  set token1Address(value: Bytes) {
    this.set("token1Address", Value.fromBytes(value));
  }

  get token0Symbol(): string {
    let value = this.get("token0Symbol");
    return value.toString();
  }

  set token0Symbol(value: string) {
    this.set("token0Symbol", Value.fromString(value));
  }

  get token1Symbol(): string {
    let value = this.get("token1Symbol");
    return value.toString();
  }

  set token1Symbol(value: string) {
    this.set("token1Symbol", Value.fromString(value));
  }

  get pools(): Array<string> {
    let value = this.get("pools");
    return value.toStringArray();
  }

  set pools(value: Array<string>) {
    this.set("pools", Value.fromStringArray(value));
  }

  get stakes(): Array<string> {
    let value = this.get("stakes");
    return value.toStringArray();
  }

  set stakes(value: Array<string>) {
    this.set("stakes", Value.fromStringArray(value));
  }

  get unStakeds(): Array<string> {
    let value = this.get("unStakeds");
    return value.toStringArray();
  }

  set unStakeds(value: Array<string>) {
    this.set("unStakeds", Value.fromStringArray(value));
  }

  get rewardRedeemeds(): Array<string> {
    let value = this.get("rewardRedeemeds");
    return value.toStringArray();
  }

  set rewardRedeemeds(value: Array<string>) {
    this.set("rewardRedeemeds", Value.fromStringArray(value));
  }
}

export class UserPoolData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UserPoolData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UserPoolData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UserPoolData", id.toString(), this);
  }

  static load(id: string): UserPoolData | null {
    return store.get("UserPoolData", id) as UserPoolData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get poolId(): BigInt {
    let value = this.get("poolId");
    return value.toBigInt();
  }

  set poolId(value: BigInt) {
    this.set("poolId", Value.fromBigInt(value));
  }

  get stakeAmount(): BigInt {
    let value = this.get("stakeAmount");
    return value.toBigInt();
  }

  set stakeAmount(value: BigInt) {
    this.set("stakeAmount", Value.fromBigInt(value));
  }

  get stakeAmount_BD(): BigDecimal {
    let value = this.get("stakeAmount_BD");
    return value.toBigDecimal();
  }

  set stakeAmount_BD(value: BigDecimal) {
    this.set("stakeAmount_BD", Value.fromBigDecimal(value));
  }

  get pendingReward(): BigInt {
    let value = this.get("pendingReward");
    return value.toBigInt();
  }

  set pendingReward(value: BigInt) {
    this.set("pendingReward", Value.fromBigInt(value));
  }

  get entryAccuRewardPerShare(): BigInt {
    let value = this.get("entryAccuRewardPerShare");
    return value.toBigInt();
  }

  set entryAccuRewardPerShare(value: BigInt) {
    this.set("entryAccuRewardPerShare", Value.fromBigInt(value));
  }
}

export class UserPoolDataSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UserPoolDataSnapshot entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UserPoolDataSnapshot entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UserPoolDataSnapshot", id.toString(), this);
  }

  static load(id: string): UserPoolDataSnapshot | null {
    return store.get("UserPoolDataSnapshot", id) as UserPoolDataSnapshot | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get staker(): Bytes {
    let value = this.get("staker");
    return value.toBytes();
  }

  set staker(value: Bytes) {
    this.set("staker", Value.fromBytes(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get poolId(): BigInt {
    let value = this.get("poolId");
    return value.toBigInt();
  }

  set poolId(value: BigInt) {
    this.set("poolId", Value.fromBigInt(value));
  }

  get stakeAmount(): BigInt {
    let value = this.get("stakeAmount");
    return value.toBigInt();
  }

  set stakeAmount(value: BigInt) {
    this.set("stakeAmount", Value.fromBigInt(value));
  }

  get pendingReward(): BigInt {
    let value = this.get("pendingReward");
    return value.toBigInt();
  }

  set pendingReward(value: BigInt) {
    this.set("pendingReward", Value.fromBigInt(value));
  }

  get entryAccuRewardPerShare(): BigInt {
    let value = this.get("entryAccuRewardPerShare");
    return value.toBigInt();
  }

  set entryAccuRewardPerShare(value: BigInt) {
    this.set("entryAccuRewardPerShare", Value.fromBigInt(value));
  }

  get redeemedRewards(): BigDecimal {
    let value = this.get("redeemedRewards");
    return value.toBigDecimal();
  }

  set redeemedRewards(value: BigDecimal) {
    this.set("redeemedRewards", Value.fromBigDecimal(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}

export class PoolInfoAndDataSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save PoolInfoAndDataSnapshot entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PoolInfoAndDataSnapshot entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PoolInfoAndDataSnapshot", id.toString(), this);
  }

  static load(id: string): PoolInfoAndDataSnapshot | null {
    return store.get(
      "PoolInfoAndDataSnapshot",
      id
    ) as PoolInfoAndDataSnapshot | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolId(): BigInt {
    let value = this.get("poolId");
    return value.toBigInt();
  }

  set poolId(value: BigInt) {
    this.set("poolId", Value.fromBigInt(value));
  }

  get totalStakeAmount(): BigInt {
    let value = this.get("totalStakeAmount");
    return value.toBigInt();
  }

  set totalStakeAmount(value: BigInt) {
    this.set("totalStakeAmount", Value.fromBigInt(value));
  }

  get accuRewardPerShare(): BigInt {
    let value = this.get("accuRewardPerShare");
    return value.toBigInt();
  }

  set accuRewardPerShare(value: BigInt) {
    this.set("accuRewardPerShare", Value.fromBigInt(value));
  }

  get accuRewardLastUpdateBlock(): BigInt {
    let value = this.get("accuRewardLastUpdateBlock");
    return value.toBigInt();
  }

  set accuRewardLastUpdateBlock(value: BigInt) {
    this.set("accuRewardLastUpdateBlock", Value.fromBigInt(value));
  }

  get startBlock(): BigInt {
    let value = this.get("startBlock");
    return value.toBigInt();
  }

  set startBlock(value: BigInt) {
    this.set("startBlock", Value.fromBigInt(value));
  }

  get endBlock(): BigInt {
    let value = this.get("endBlock");
    return value.toBigInt();
  }

  set endBlock(value: BigInt) {
    this.set("endBlock", Value.fromBigInt(value));
  }

  get rewardPerBlock(): BigInt {
    let value = this.get("rewardPerBlock");
    return value.toBigInt();
  }

  set rewardPerBlock(value: BigInt) {
    this.set("rewardPerBlock", Value.fromBigInt(value));
  }

  get poolToken(): Bytes {
    let value = this.get("poolToken");
    return value.toBytes();
  }

  set poolToken(value: Bytes) {
    this.set("poolToken", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}
